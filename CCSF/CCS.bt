//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: CCS.bt
//   Authors: HydraBladeZ, 
//   Version: 1.0
//   Purpose: Parse CCS files
//  Category: CyberConnect
// File Mask: *.ccs
//  ID Bytes: 46 53 43 43
//   History: 1.0: Can read most chunk types
//------------------------------------------------

#define CCS
#include "/../include.h"
#include "CCS_Types.bt"
#include "CCS_AnmStructs.bt"
#include "CCS_Animation.bt"
#include "CCS_Stream.bt"

local u32 ccsfColor = SetRandomBackColor();
local u32 stringTableColor = SetRandomBackColor();
local u32 stringTableFileColor = SetRandomBackColor();
local u32 stringTableNameColor = SetRandomBackColor();
local u32 setupColor = SetRandomBackColor();
local u32 chunkSectionColor = SetRandomBackColor();
local u32 ObjectSectionColor = SetRandomBackColor();
local u32 TextureSectionColor = SetRandomBackColor();
local u32 ClumpSectionColor = SetRandomBackColor();
local u32 ExternalSectionColor = SetRandomBackColor();
local u32 ColorPaletteSectionColor = SetRandomBackColor();
local u32 ModelSectionColor = SetRandomBackColor();
local u32 MaterialSectionColor = SetRandomBackColor();
local u32 AnimationSectionColor = SetRandomBackColor();
local u32 BboxSectionColor = SetRandomBackColor();
local u32 HitSectionColor = SetRandomBackColor();
local u32 AnimationReferenceColor = SetRandomBackColor();
local u32 DynamicsColor = 0x000000;

LittleEndian();




//CCS File
typedef struct
{   
    SetBackColor( ccsfColor );

    u16 DataType;
    u16 Signature;
    u32 DataSize;
    
    char Magic[4];
    Assert( Magic == "CCSF" );
    char FileName[32];
    
    u32 Version <format = hex>;
    u32 TotalChunkCount;
    u32 Unk;
    u32 Padding;
    //Assert(Padding == 0);

    struct TStringTable StringTable;
    struct TSetup Setup;
    
    struct TChunkTable CCSChunk;

} TCCSF <optimize=false>;



// String Table
typedef struct
{
    SetBackColor( stringTableColor );
    
    u16 DataType;
    u16 Signature;
    u32 DataSize;
    u32 FilePathCount;
    u32 NameCount;
        
    SetBackColor( stringTableFileColor );
    struct {struct TString FilePaths[FilePathCount]; } FilePaths;

    SetBackColor( stringTableNameColor );
    struct {struct ChunkNames ChunkName[NameCount]; } Names;
    
} TStringTable <optimize=false>;

//Null
typedef struct
{
    SetBackColor( setupColor );
    u32 DataType;
    u32 DataSize;

} TSetup <optimize=false>;


// Chunk Table

typedef struct
{
    SetBackColor( chunkSectionColor );
    while (!FEof())
    struct TChunk Chunk;

} TChunkTable;



// Path String Structure
typedef struct
{
    char Data[32];

} TString <optimize=false, read=ReadTString>;

//Names
typedef struct
{
    char Data[30];
    ushort PathIndex;
}ChunkNames <optimize=false, read=Data>;

//Object Chunk
typedef struct
{   
    SetBackColor( ObjectSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ParentObjectID <read=ReadChunkNameIndex>;
    u32 ModelID <read=ReadChunkNameIndex>;
    u32 ShadowID <read=ReadChunkNameIndex>;

    local u32 CurVersion = CCSF.Version;
    if (CurVersion > 0x120)
    {
        u32 Extra <read=ReadChunkNameIndex>;
    }

}OBJ;


typedef struct
{   
    SetBackColor( SetRandomBackColor() );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    char name[29];
    BigEndian();
    short someIndex;
}BIN;


//Material Chunk
typedef struct
{   
    SetBackColor( MaterialSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 TextureIndex <read=ReadChunkNameIndex>;
    float Alpha;
    if (CCSF.Version > 0x120)
    {
        float OffsetX;
        float OffsetY;
        u8 data[(DataSize * 4) - 0x14];
    }
    else
    {
        s16 Offset1 <read = (this / 32767.0)>;
        s16 Offset2 <read = (this / 32767.0)>;
        u8 data[DataSize * 4 - 0x10];
    }
    
}MAT;

//Material Chunk
typedef struct
{   
    SetBackColor( SetRandomBackColor() );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;

}CAM;

//Texture Chunk
typedef struct
{
    SetBackColor( TextureSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ClutID <read=ReadChunkNameIndex>;
    u32 BlitGroupID <read=ReadChunkNameIndex>;
    u8 TextureFlags;
    TextureTypes TextureType;
    u8 MipMapsCount;
    u8 Unk1;
    u8 Width;
    u8 Height;
    u16 Unk2;
    local u32 CurVersion = CCSF.Version;
    local u8 NonP2;
    
    
    if (CurVersion < 0x120)
    {
        local int ActualWidth = 1 << Width;
        local int ActualHeight = 1 << Height;
        u32 Unk3;
    }
    else if (Width == 0xff || Height == 0xff)
    {
        u16 TexWidth;
        u16 TexHeight;
    }
    else if (TextureType == 0x87|| TextureType == 0x89)
    {
        FSkip(0x10);
        u16 TexWidth;
        u16 TexHeight;
        FSkip(0x14);
    }
    else
    {
        u32 Unk4;
    }             
    
    u32 TextureDataSize;
    
    if (TextureType == 0x87|| TextureType == 0x89)
    {
        local u32 TexDataSize = TextureDataSize - 0x40;
        FSkip(0x0C);
        char TextureName[16];
    }
    else
    {
        local u32 TexDataSize = TextureDataSize << 2;
    }
    
   u8 Pixels[TexDataSize];
    
    /*if (TextureType == 0)
    {
        Printf("Texture found at %d", ChunkNameIndex);
    }*/

}TEX;

//Color Palette Chunk
typedef struct
{   
    SetBackColor( ColorPaletteSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 BlitGroup;
    FSkip(8);
    u32 ColorCount;
    local int i;

    struct
        {
            u8 B;
            u8 G;
            u8 R;
            u8 A;
            
        }Color[ColorCount];

}CLT;

//Model Chunk
typedef struct
{   
    SetBackColor( ModelSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    f32 VertexScale;
    u8 ModelType;
    u8 MeshFlags;
    u16 MeshCount;
    u8 SourceFactor;
    u8 DestinationFactor;
    s16 UnkFlags;
    u32 LookupCount;
    local u32 CurVersion = CCSF.Version;
    if (CurVersion > 0x110)
    {
        struct
        {
            u8 R;
            u8 G;
            u8 B;
            u8 A;
   
        }OutlineColor;
        float OutlineThickness;
    }
    if (MeshCount > 0)
    {   //Rigid models
        if (ModelType < Deformable)
        {
            local int m;
            for (m = 0; m < MeshCount; m++)
            {
                struct
                {
                    u32 ParentID <read=ReadChunkNameIndex>;
                    u32 MatTexID <read=ReadChunkNameIndex>;
                    u32 VertexCount;
                    struct
                    {
                        s16 X;
                        s16 Y;
                        s16 Z;
                    }VertexPositions[VertexCount];

                    if ((FTell() % 4) == 2)
                    {
                        u16 Padding;
                    }
                    struct
                    {

                        s8 vnX;
                        s8 vnY;
                        s8 vnZ;

                        u8 triFlag;
                    }VertsNormals[VertexCount];
                    
                    local int NoColorFlag = (MeshFlags & 2) != 2;
                    if(NoColorFlag && ModelType < 4)
                    {
                        struct
                        {
                            u8 R;
                            u8 G;
                            u8 B;
                            u8 A;
                        }VertexColors[VertexCount];
                    }
                    if (MeshFlags != 6 && MeshFlags != 4)
                    {
                        struct
                        {
                            if(CCSF.Version >= 0x125)
					        {
						        u32 U;
                                u32 V;
					        }
					        else
					        {
                                s16 U;
                                s16 V;					            
                            }
                        }UVCoords[VertexCount] <optimize = true>;
                    }
                }Mesh;
            }
        }
        
        else if (ModelType == 6 || ModelType == 7)
        {
            if (CCSF.Version > 0x111)
            {
            u8 LookupList[LookupCount]<read=ReadChunkNameLookup> ;
            }
            if ( (FTell() % 4) != 0)
            {
                local u32 PadSize = 4 - (FTell() % 4);
                FSkip(PadSize);
            }
            u32 MatTexID <read=ReadChunkNameIndex>;
            uint SectionCount;
            local int alignsize;
            struct{
                ubyte unkFlag1;
                ubyte SectionType;
                ubyte unkFlag2;
                ubyte unkFlag3;
                uint Count;
                float VertexScale;
                if (SectionType == 8)
                {
                    ushort TriangleIndices[Count];
                }
                else if (SectionType == 0)
                {
                    struct
                    {
                        byte X <read= (this / 64.0)>;
                        byte Y <read= (this / 64.0)>;
                        byte Z <read= (this / 64.0)>;
                    }VertexNormals[Count];
                }
                else if (SectionType == 1)
                {
                    struct{
                        short U <read= (this / 256.0)>;
                        short V <read= (this / 256.0)>;
                    }VertexUVs[Count];
                }
                else if (SectionType == 7)
                {
                    byte TriangleFlags[Count];
                }
                else if (SectionType == 32)
                {
                    struct{
                        short X <read = ((this / 16.0) / ((parentof(parentof(this)).VertexScale) / 256.0))>;
                        short Y <read = ((this / 16.0) / ((parentof(parentof(this)).VertexScale) / 256.0))>;
                        short Z <read = ((this / 16.0) / ((parentof(parentof(this)).VertexScale) / 256.0))>;
                        short Weight <read = Str("(Bone = %d, Weight =%f)", (this >> 10),((this & 0x1ff) / 256.0))>;
                    }VertexPositions[Count] <optimize = false>;
                }
                else if (SectionType == 33)
                {
                    u32 Clump[Count] <read=ReadChunkNameIndex>;
                }
                alignsize = (FTell()) % 4;
            
                if (alignsize != 0)
                {
                    Printf("ALIGNING\n");
                    byte align[4 - alignsize];
                }
            }Section[SectionCount] <optimize = false>;
        }
        //Deformable models
        else if (ModelType & 4)
        {
            if (CurVersion > 0x111)
            {
                u8 LookupList[LookupCount] <read=ReadChunkNameLookup>;
            }
            if ((FTell() % 4) != 0)
            {
                local u32 PadSize = 4 - (FTell() % 4);
                FSkip(PadSize);
            }
            
            local int m, i, v;
            for (m = 0; m < MeshCount; m++)
            {
                struct
                {
                    u32 MatTexID <read=ReadChunkNameIndex>;
                    u32 VertexCount;
                    u32 Unk;
                    u32 ParentID; // from lookup list
        
                    struct
                    {
                        s16 X;
                        s16 Y;
                        s16 Z;
                    } VertexPositions[VertexCount];
        
                    if ((FTell() % 4) == 2)
                    {
                        u16 Padding;
                    }
        
                    struct
                    {
                        u8 vnX;
                        u8 vnY;
                        u8 vnZ;
                        u8 triFlag;
                    } VertsNormals[VertexCount];
        
                    struct
                    {
                        if (CCSF.Version >= 0x125)
                        {
                            s32 U;
                            s32 V;
                        }
                        else
                        {
                            s16 U;
                            s16 V;
                        }
                    } UVCoords[VertexCount] <optimize = true>;
                } Mesh;
                
                if (m+2 >= MeshCount)
                {
                    break;
                }
            }
            
            if (LookupCount > 1)
            {
                struct
                {
                    u32 MatTexID <read=ReadChunkNameIndex>;
                    u32 VertexCount;
                    u32 DeformableVerts;
            
                    if (CCSF.Version < 0x125)
                    {
                        local int t;
            
                        struct
                        {
                            s16 X;
                            s16 Y;
                            s16 Z;
                            u16 Params;
                            local int dualFlag = ((Params >> 9) & 0x1) == 0;
            
                            if (dualFlag)
                            {
                                s16 X2;
                                s16 Y2;
                                s16 Z2;
                                u16 Params2;
                            }
                        } VertexPosition[VertexCount] <optimize = false>;
            
                        if ((FTell() % 4) == 2)
                        {
                            u16 Padding;
                        }
            
                        struct
                        {
                            u8 vnX;
                            u8 vnY;
                            u8 vnZ;
                            u8 triFlag;
                        } VertsNormals[DeformableVerts];
            
                        struct
                        {
                            if (CCSF.Version >= 0x125)
                            {
                                u32 U;
                                u32 V;
                            }
                            else
                            {
                                u16 U;
                                u16 V;
                            }
                        } UVCoords[VertexCount] <optimize = true>;
                    }
                    else if (ModelType == 6)
                    {
                        if (CurVersion > 0x111)
                        {
                            u8 LookupList[LookupCount] <read=ReadChunkNameLookup>;
                        }
                        if ((FTell() % 4) != 0)
                        {
                            local u32 PadSize = 4 - (FTell() % 4);
                            FSkip(PadSize);
                        }
                    }
                    else
                    {
                        // GEN3
                        struct
                        {
                            s16 X;
                            s16 Y;
                            s16 Z;
                            u16 Weight;
                            u16 StopBit;
                            u16 BoneID;
                        } VertexPositions[DeformableVerts];
            
                        if ((FTell() % 4) == 2)
                        {
                            u16 Padding;
                        }
            
                        struct
                        {
                            u8 vnX;
                            u8 vnY;
                            u8 vnZ;
                            u8 triFlag;
                        } VertsNormals[DeformableVerts];
            
                        struct
                        {
                            u32 U;
                            u32 V;
                        } UVCoords[VertexCount];
                    }
                } DeformableMesh;
            }
        }
        //Shadow Models
        else if (ModelType == ShadowMesh)
        {   
            local int i;
            for (i = 0; i < MeshCount; i++)
            {
                struct
                {
                    u32 VertexCount;
                    u32 TriangleVerticesCount;

                    struct
                    {
                        s16 X;
                        s16 Y;
                        s16 Z;
                        
                    }VertsPositions[VertexCount]; 
                    if ( (FTell() % 4) == 2) 
                    {
                        u16 Padding;
                    }
                    struct
                    {

                        s32 ID1;
                        s32 ID2;
                        s32 ID3;

                    }Triangles[TriangleVerticesCount / 3];

                }Mesh;
            }
        }
    }
}MDL <read = ReadModelType(ModelType)>;


//Clump Chunk
typedef struct
{   
    SetBackColor( ClumpSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 BoneCount;
    local int i;

    u32 BoneIndex[BoneCount] <read=ReadChunkNameIndex>;
    
    if (CCSF.Version > 0x100)
    {        
        struct
        {
            float X_Position;
            float Y_Position;
            float Z_Position;
            
            float X_Rotation;
            float Y_Rotation;
            float Z_Rotation;
            
            float X_Scale;
            float Y_Scale;
            float Z_Scale;
        }BoneCoords[BoneCount] ;
    }
    
}CMP;

typedef struct
{   
    SetBackColor( DynamicsColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    short SpringBoneCount;
    short CollisionCount;
    
    struct{
        int BoneIndex;
        float X ;
        float Y;
        float Z;
    }SpringBones[SpringBoneCount] <optimize = false>;

    struct{
        int BoneIndex;
        float PosX;
        float PosY;
        float PosZ;
        float RotX;
        float RotY;
        float RotZ;
        float ScaleX;
        float ScaleY;
        float ScaleZ;
        
    }Collisions[CollisionCount];

}DYN;

//External Object Chunk
typedef struct
{   
    SetBackColor( ExternalSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ReferencedParentID <read = ReadChunkNameIndex>;
    u32 ReferencedObjectID <read = ReadChunkNameIndex>;
}EXT;

//Bounding Box Chunk
typedef struct
{   
    SetBackColor( BboxSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ModelChunk <read=ReadChunkNameIndex>;
    f32 BboxCoords[6];
}BOX;

//Dummy Position Chunk
typedef struct
{   
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    f32 Position[3];
}DMY;

//Dummy Position and Rotation Chunk
typedef struct
{   
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    f32 Position[3];
    float Rotation[3];
}DMY2;
    
//Hit Chunk     
typedef struct
{   
    SetBackColor(HitSectionColor);
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ModelChunkIndex <read=ReadChunkNameIndex>;
    u32 HitMeshCount;
    uint TotalVertexCount;
    struct{
            u32 VertexCount;
            u32 HitParams;
            struct{
                struct{
                    float X;
                    float Y;
                    float Z;
                }Vertex[3] <optimize = false>;
            }Triangles[VertexCount / 3] <optimize = false>;

            struct{
                struct{
                    float X;
                    float Y;
                    float Z;
                }Vertex[3] <optimize = false>;
            }Triangles2[VertexCount / 3] <optimize = false>;
    }HitMesh[HitMeshCount] <optimize = false>;
}HIT;

//Morph Chunk
typedef struct
{   
    //SetBackColor( BboxSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 TargetModel <read=ReadChunkNameIndex>;
    local string TargetName = ReadChunkNameIndex(TargetModel);
}MPH <read = TargetName>;

//AnimationReference Chunk
typedef struct
{   
    SetBackColor( AnimationReferenceColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ParentObjectID <read=ReadChunkNameIndex>;
    u32 ModelID <read=ReadChunkNameIndex>;
    //Assert(ModelID == 0);
    u32 LayerID <read=ReadChunkNameIndex>;
    u32 Extra <read=ReadChunkNameIndex>;

}ANMOBJ;

//Layer Chunk
typedef struct
{
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u8 Data[(DataSize * 4) - 4];
}LYR;


//OutlineParam Chunk
typedef struct
{
    SetBackColor( SetRandomBackColor() );
    u32 Layer <read=ReadChunkNameIndex>;
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ObjectIndex <read=ReadChunkNameIndex>;
    u32 Texture <read=ReadChunkNameIndex>;
}OLP;


//CelShadeParam Chunk
typedef struct
{
    SetBackColor( SetRandomBackColor() );
    ushort unk1;
    ushort unk2;
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 ObjectIndex <read=ReadChunkNameIndex>;
    u32 TextureIndex <read=ReadChunkNameIndex>;
}CSP;

//CelShadeParam Chunk
typedef struct
{
    SetBackColor( SetRandomBackColor() );
    ushort unk1;
    ushort unk2;
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    //u32 TextureIndex <read=ReadChunkNameIndex>;
}FSB;

typedef struct
{
    SetBackColor( SetRandomBackColor() );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    u32 Unk;
}LIT;


//Unknown Chunk
typedef struct
{
    local uint ChunkNameIndex = 0;
    u8 Data[(DataSize * 4)];
}UNK;

// Chunk Structure
typedef struct
{   
    DataTypes ChunkType;
    u16 ChunkVersion;
    u32 DataSize;
    switch (ChunkType)
    {
        case Object:
            struct OBJ Chunk;
            break;
        case AnimationReference:
            struct ANMOBJ Chunk;
            break;
        case Material:
            struct MAT Chunk;
            break;
        case Texture:
            struct TEX Chunk;
            break;
        case ColorPalette:
            struct CLT Chunk;
            break;
        case Model:
            struct MDL Chunk;
            break;
        case Clump:
            struct CMP Chunk;
            break;
        case Dynamics:
            struct DYN Chunk;
            break;
        case External:
            struct EXT Chunk;
            break;
        case Animation:
            struct ANM Chunk;
            break;
        case Bounding_Box:
            struct BOX Chunk;
            break;
        case Dummy_Position:
            struct DMY Chunk;
            break;
        case Dummy_Position_Rotation:
            struct DMY2 Chunk;
            break;
        /*case Binary_Blob:
            struct BIN Chunk;
            break;*/
        case HitModel:
            struct HIT Chunk;
            break;
        case Morpher:
            struct MPH Chunk;
            break;
        case Layer:
            struct LYR Chunk;
            break;
        case Stream:
            struct STRM Chunk;
            break;
        case StreamOutlineParam:
            struct OLP Chunk;
            break;
        case StreamCelShadeParam:
            struct CSP Chunk;
            break;
        case StreamFSBlurParam:
            struct FSB Chunk;
            break;
        case Camera:
            struct CAM Chunk;
            break;
        case Frame:
            //s32 Index;
            break;
        case Light:
            struct LIT Chunk;
            break;
        
        default:
            struct UNK Chunk;
            break;
    }
    local string chunkReadString = ReadChunkNameIndex(Chunk.ChunkNameIndex);
        
  
} TChunk <read= ReadChunkName>;



string ReadTString(TString& value )
{
    return value.Data;
}

string ReadChunkNameIndex(u32& value )
{
    if (value > -1)
    {
    local string str = "";
    local string Name = CCSF.StringTable.Names.ChunkName[value].Data;
    //local string Name = "";
    local int Index = value;
    SPrintf(str, "%s (Index %d)", Name , Index);
    return str;
    }
    else
    {
    return "EOF";
    }
}

string ReadChunkNameSIndex(s32 & value )
{
    local string str = "";
    local string Name = CCSF.StringTable.Names.ChunkName[value].Data;
    local int Index = value;
    SPrintf(str, "%s (Index %d)", Name , Index);
}

string ReadChunkNameLookup(u8 & value )
{
    return CCSF.StringTable.Names.ChunkName[value].Data;
}

string ReadChunkName(struct TChunk & value )
{
    return value.chunkReadString;
}

string ReadModelType(u8 & value)
{
    local string str = "";

    if (value & 1){str += "Rigid | ";}
    if (value & 2) {str += "Morphable | ";}
    if (value & 4) {str += "Deformable | ";}
    if (value & 8) {str += "Shadow";}
    
    return str;
}

string ReadAnmChunkType(AnimationTypes & value)
{
    local string str = "";

    switch (value)
    {
        case 0xff01:
            str = "Frame";
        break;
        
        case 0x0101:
            str = "ObjectKeyframe";
        break;
        
        case 0x0102:
            str = "ObjectController";
        break;
        
        case 0x0108:
            str = "NoteFrame";
        break;
        
        case 0x0201:
            str = "MaterialFrame";
        break;
        
        case 0x0202:
            str = "MaterialController";
        break;

        case 0x0502:
            str = "CameraFrame";
        break;
        
        case 0x0601:
            str = "AmbientKeyframe";
        break;

        case 0x0602:
            str = "DistantLightFrame";
        break;
        
        case 0x0603:
            str = "DirectionalLightController";
        break;
        
        case 0x0609:
            str = "OmniLightController";
        break;
        
        case 0x1801:
            str = "ShadowFrame";
        break;

        case 0x1901:
            str = "MorphKeyframe";
        break;

        case 0x1A01:
            str = "OutlineFrame";
        break;

        case 0x1B01:
            str = "CelShadeFrame";
        break;
        
        case 0x1D01:
            str = "FBSBlurFrame";
        break;
        
    }
    
    return str;
}

TCCSF CCSF;