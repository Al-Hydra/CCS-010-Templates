//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: CCS.bt
//   Authors: HydraBladeZ
//   Version: 0.01
//   Purpose: Parse CCS files
//  Category: 
// File Mask: *.ccs
//  ID Bytes: 46 53 43 43
//   History: 
//------------------------------------------------

LittleEndian();

//Animation Chunk
typedef struct
{   
    SetBackColor( AnimationSectionColor );
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;
    s32 FrameCount;
    u32 FramesSectionSize; //Multiplied by 4
    
    local int CurrentFrame = 0;
    local int StartPos = FTell();
    local int EndPos = StartPos + (FramesSectionSize * 4);
    local int i;
    
    while (FTell() < EndPos)
    {
        struct
        {
            AnimationTypes Type;
            FSkip(2);
            u32 Size;
            
            switch (Type)
            {
                case ObjectController:
                    struct
                    {
                        u32 ObjectID <read=ReadChunkNameIndex>;
                        u16 EntryType;
                        u16 Unk;
                        
                        struct{
                            AnmCtrlFVec3(EntryType);
                        }Position;
                        
                        struct{
                            AnmCtrlRot(EntryType >> 3);
                        }Rotation;
                        
                        struct{
                        AnmCtrlFVec3(EntryType >> 6);
                        }Scale;
                        
                        struct{
                        AnmCtrlFloat(EntryType >> 9);
                        }Opacity;

                    }ObjectController;
                    break;
    
                case Frame:
                    struct
                    {
                        s32 CurrentFrame;
                    }Frame;
                break;

                case MorpherFrame:
                    struct
                    {
                        u32 Index <read= ReadChunkNameIndex>;
                        u32 Count;
                        struct
                        {
                            s32 Frame;
                            f32 Value;
                        }MorphFrame[Count];
                        
                    }Morph;
                break;

                case NoteFrame:
                    struct
                    {
                        u32 Index <read= ReadChunkNameIndex>;
                        u32 Unk1;
                        u32 Unk2;
                        
                    }NoteFrame;
                break;
                
                default:
                    Printf("Unknown Animation (%x) at %x\n", Type, FTell());
                    struct
                        {
                            u8 Data [Size * 4];
                        }SUnknown;
                break;
            }
        }AnimationChunk <read = ReadAnmChunkType(Type)>;
    }
        
}ANM;


void AnmCtrlFVec3(u16 EntryType)
{
    if ((EntryType & 7) == 2)
    {
        u32 FrameCount;
        
        local int i;
        for (i = 0; i < FrameCount; i++)
        {

            u32 Frame;
            struct Vector3 Vector;
        }
        
    }
    else if ((EntryType & 7) == 1)
    {
        struct Vector3 Position;
    }
}


void AnmCtrlRot(u16 EntryType)
{
    if ((EntryType & 7) == 2)
    {
        u32 FrameCount;

        local int i;
        for (i = 0; i < FrameCount; i++)
        {
            u32 Frame;
            struct RotEuler Rotation;
        }
    }
    if ((EntryType & 7) == 4)
    {
        u32 FrameCount;

        local int i;
        for (i = 0; i < FrameCount; i++)
        {
            u32 Frame;
            struct RotQuaternion Rotation;
        }
    }
    else if ((EntryType & 7) == 1)
    {
        struct RotEuler Rotation;
    }
}

void AnmCtrlClr(u16 EntryType)
{
    if ((EntryType & 7) == 2)
    {
        u32 FrameCount;
        local int i;
        for (i = 0; i < FrameCount; i++)
        {
            u32 Frame;
            struct ColorRGBA Color;
        }
    }
    else if ((EntryType & 7) == 1)
    {
        struct ColorRGBA Color;
    }
}

void AnmCtrlFloat(u16 EntryType)
{
    if ((EntryType & 7) == 2)
    {
        u32 FrameCount;
        local int i;
        for (i = 0; i < FrameCount; i++)
        {
            u32 Frame;
            f32 Opacity;
        }
    }
    else if ((EntryType & 7) == 1)
    {
        f32 Opacity;
    }
}

typedef struct{
    float PosX;
    float PosY;
    float PosZ;
}Vector3;

typedef struct{
    float RotX;
    float RotY;
    float RotZ;
}RotEuler;

typedef struct{
    float RotX;
    float RotY;
    float RotZ;
    float RotW;
}RotQuaternion;

typedef struct{
    ubyte R;
    ubyte G;
    ubyte B;
    ubyte A;
}ColorRGBA;
